# ####################################################
# ASP.NET Microservices | HildenCo Webstore
#   * Source code: github.com/hd9/aspnet-microservices
#   * More about this app at: blog.hildenco.com
# ####################################################

# If you're looking to run all the microservices, run:
# docker-compose up

version: '3.7'

volumes:
    grafana_data: {}

services:

  web:
    image: web
    build:
      context: ./Web
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    ports:
      - "8000:80"
      # use this if you want to scale up the service with:
      # docker-compose up --scale web=3
      #- 80
    depends_on:
      - catalog
      - newsletter
      - order
      - account
      - recommendation
      - notification
      - payment
      - shipping
      - redis
      - rabbitmq
      - redis-commander
      - mysql-admin

  catalog:
    image: catalog
    build:
      context: ./CatalogSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    expose:
      - "80"
    environment:
      - todo=true
    ports:
      - "8001:80"
    depends_on:
      - catalog-db
      - rabbitmq

  catalog-db:
    image: mongo
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: todo
      MONGO_INITDB_DATABASE: catalog
    volumes:
    - ./CatalogSvc/db.js:/docker-entrypoint-initdb.d/db.js:ro
    expose:
      - "27017"

  newsletter:
    image: newsletter
    build:
      context: ./NewsletterSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    expose:
      - "80"
    environment:
      - todo=true
    ports:
      - "8002:80"
    depends_on:
      - newsletter-db
      - rabbitmq

  newsletter-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./NewsletterSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"
    
  order:
    image: order
    build:
      context: ./OrderSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    expose:
      - "80"
    environment:
      - todo=true
    ports:
      - "8003:80"
    depends_on:
      - order-db
      - rabbitmq

  order-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./OrderSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"

  account:
    build:
      context: ./AccountSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    image: account
    expose:
      - "80"
    environment:
      - todo=true
    ports:
      - "8004:80"
    depends_on:
      - account-db
      - rabbitmq

  account-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./AccountSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"

  recommendation:
    image: recommendation
    build:
      context: ./RecommendationSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    expose:
      - "80"
    environment:
      - todo=true
    ports:
      - "8005:80"
    depends_on:
      - recommendation-db
      - rabbitmq

  recommendation-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./RecommendationSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"


  notification:
    image: notification
    build:
      context: ./NotificationSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    environment:
      # Enter your SMTP settings by setting the following env vars
      - SmtpOptions__Host=${SmtpOptions__Host}
      - SmtpOptions__Username=${SmtpOptions__Username}
      - SmtpOptions__Password=${SmtpOptions__Password}
      - SmtpOptions__EmailOverride=${SmtpOptions__EmailOverride}
    expose:
      - "80"
    ports:
      - "8006:80"
    depends_on:
      - notification-db
      - rabbitmq

  notification-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./NotificationSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"

  payment:
    image: payment
    build:
      context: ./PaymentSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    environment:
      - todo=true
    expose:
      - "80"
    ports:
      - "8007:80"
    depends_on:
      - payment-db
      - rabbitmq

  payment-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./PaymentSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"

  shipping:
    image: shipping
    build:
      context: ./ShippingSvc
      args:
        GITHUB_API_KEY: ${GITHUB_API_KEY}
    expose:
      - "80"
    ports:
      - "8008:80"
    depends_on:
      - shipping-db
      - rabbitmq

  shipping-db:
    image: mysql
    command: --init-file /data/db.sql
    volumes:
      - ./ShippingSvc/db.sql:/data/db.sql
    environment:
      - MYSQL_ROOT_PASSWORD=todo
    expose:
      - "3306"

  redis:
    image: redis:6-alpine
    expose:
      - "6379"

  mysql-admin:
     image: adminer:latest
     ports:
      - "8010:8080"

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8011:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=catalog-db
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: todo
    depends_on:
      - catalog-db

  rabbitmq:
    image: rabbitmq:management-alpine
    environment:
      - todo
    expose:
      - "5672"
    ports:
      - "8012:15672"

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=redis
    ports:
      - "8013:8081"
    depends_on:
      - redis

  # config for prometheus (time-series db)
  # uncomment the port if you want to access it from localhost
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    # ports:
    # - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor

  # config for cadvisor (tool to gather container metrics)
  # uncomment the port if you want to access it from localhost
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    # ports:
    # - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - redis

  # frontend for prometheus
  # access it at: http://localhost:3000 [admin | admin]
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - cadvisor
      
